{"version":3,"sources":["styles.js","index.js"],"names":["StyledForm","styled","form","_templateObject","Object","taggedTemplateLiteral","Field","div","_templateObject2","Label","span","_templateObject3","BinaryTextInput","input","_templateObject4","DecimalTextInput","_templateObject5","Button","button","_templateObject6","App","_useState","useState","_useState2","slicedToArray","binaryText","setBinaryText","_useState3","_useState4","decimalText","setDecimalText","_useState5","_useState6","errorMessage","setErrorMessage","react_default","a","createElement","Fragment","onSubmit","e","preventDefault","match","result","split","map","Number","reverse","reduce","accumulator","currentValue","idx","Math","pow","style","color","autoComplete","type","name","placeholder","value","onChange","target","disabled","rootElement","document","getElementById","ReactDOM","render"],"mappings":"yMAEaA,EAAaC,IAAOC,KAAIC,MAAAC,OAAAC,EAAA,EAAAD,CAAA,0KAQxBE,EAAQL,IAAOM,IAAGC,MAAAJ,OAAAC,EAAA,EAAAD,CAAA,uDAKlBK,EAAQR,IAAOS,KAAIC,MAAAP,OAAAC,EAAA,EAAAD,CAAA,iIAMnBQ,EAAkBX,IAAOY,MAAKC,MAAAV,OAAAC,EAAA,EAAAD,CAAA,+PAgB9BW,EAAmBd,IAAOY,MAAKG,MAAAZ,OAAAC,EAAA,EAAAD,CAAA,4MAY/Ba,EAAShB,IAAOiB,OAAMC,MAAAf,OAAAC,EAAA,EAAAD,CAAA,qPCrCnC,SAASgB,IAAM,IAAAC,EACuBC,mBAAS,IAAGC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAiB,EAAA,GAAzCI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAAAI,EACML,mBAAS,IAAGM,EAAAxB,OAAAoB,EAAA,EAAApB,CAAAuB,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAAAG,EACMT,mBAAS,IAAGU,EAAA5B,OAAAoB,EAAA,EAAApB,CAAA2B,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GA2BpC,OACEG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UAAI,+BAEJF,EAAAC,EAAAC,cAACrC,EAAU,CAACuC,SA5BK,SAAAC,GAInB,GAHAA,EAAEC,iBAGoC,OAAlChB,EAAWiB,MAAM,aAArB,CAKAR,EAAgB,IAEhB,IAMMS,EANqBlB,EACxBmB,MAAM,IACNC,IAAIC,QACJC,UAG+BC,OAChC,SAACC,EAAaC,EAAcC,GAAG,OAC7BF,EAAcC,EAAeE,KAAKC,IAAI,EAAGF,KAE7CrB,EAAea,QAhBbT,EAAgB,yBAwBbD,GAAgBE,EAAAC,EAAAC,cAAA,QAAMiB,MAAO,CAAEC,MAAO,QAAUtB,GACjDE,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC/B,EAAK,KACJ6B,EAAAC,EAAAC,cAAC5B,EAAK,KAAC,gBACP0B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACzB,EAAe,CACd4C,aAAa,MACbC,KAAK,OACLC,KAAK,SACLC,YAAY,eACZC,MAAOnC,EACPoC,SAAU,SAAArB,GAAC,OAAId,EAAcc,EAAEsB,OAAOF,UAExCzB,EAAAC,EAAAC,cAACpB,EAAM,CAACwC,KAAK,UAAS,aAG1BtB,EAAAC,EAAAC,cAAC/B,EAAK,KACJ6B,EAAAC,EAAAC,cAAC5B,EAAK,KAAC,kBACP0B,EAAAC,EAAAC,cAACtB,EAAgB,CACf0C,KAAK,OACLC,KAAK,UACLE,MAAO/B,EACPkC,UAAQ,OAQpB,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOjC,EAAAC,EAAAC,cAACjB,EAAG,MAAK4C","file":"static/js/main.96b23115.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const StyledForm = styled.form`\n  border: 1px solid gray;\n  border-radius: 5px;\n  padding: 10px;\n  width: 50%;\n  background: radial-gradient(ellipse at center, #f2f9fe 0%, #d6f0fd 100%);\n`\n\nexport const Field = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nexport const Label = styled.span`\n  margin: 10px;\n  font-size: 18px;\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n`\n\nexport const BinaryTextInput = styled.input`\n  width: 50%;\n  font-size: 18px;\n  margin-left: 10px;\n  margin-bottom: 10px;\n  border: 1px solid #a3a3a3;\n  padding: 10px;\n  border-radius: 2px;\n  background: #e0f0f0;\n  outline: none;\n\n  &:focus {\n    border: 1px solid orange;\n  }\n`\n\nexport const DecimalTextInput = styled.input`\n  width: 50%;\n  font-size: 18px;\n  margin-left: 10px;\n  margin-bottom: 10px;\n  border: 1px solid #a3a3a3;\n  padding: 10px;\n  border-radius: 2px;\n  background: #e0f0e0;\n  outline: none;\n`\n\nexport const Button = styled.button`\n  width: 30%;\n  margin-bottom: 10px;\n  margin-left: 10px;\n  padding: 10px;\n  border: 1px solid;\n  border-radius: 2px;\n  font-size: 18px;\n  cursor: pointer;\n\n  &:hover {\n    border: 1px solid orange;\n    color: orange;\n  }\n`\n","import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport {\n  StyledForm,\n  BinaryTextInput,\n  Label,\n  Button,\n  DecimalTextInput,\n  Field\n} from './styles'\n\nfunction App() {\n  const [binaryText, setBinaryText] = useState('')\n  const [decimalText, setDecimalText] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n\n  // Perform the conversion on form submit\n  const onFormSubmit = e => {\n    e.preventDefault() // prevents refresh of the browser\n\n    // Make sure we accept only either 0 or 1\n    if (binaryText.match(/^[0-1]+$/g) === null) {\n      setErrorMessage('Enter either 0 or 1')\n      return\n    }\n\n    setErrorMessage('') // Reset the error message\n\n    const reversedBinaryText = binaryText\n      .split('')\n      .map(Number) // Convert to a number from string\n      .reverse()\n\n    // Calculate the result by accumulating previous vaue\n    const result = reversedBinaryText.reduce(\n      (accumulator, currentValue, idx) =>\n        accumulator + currentValue * Math.pow(2, idx)\n    )\n    setDecimalText(result)\n  }\n\n  return (\n    <>\n      <h1>Binary to Decimal Converter</h1>\n\n      <StyledForm onSubmit={onFormSubmit}>\n        {errorMessage && <span style={{ color: 'red' }}>{errorMessage}</span>}\n        <br />\n        <Field>\n          <Label>Binary Input</Label>\n          <div>\n            <BinaryTextInput\n              autoComplete=\"off\"\n              type=\"text\"\n              name=\"binary\"\n              placeholder=\"Enter 0 or 1\"\n              value={binaryText}\n              onChange={e => setBinaryText(e.target.value)}\n            />\n            <Button type=\"submit\">Convert</Button>\n          </div>\n        </Field>\n        <Field>\n          <Label>Decimal Output</Label>\n          <DecimalTextInput\n            type=\"text\"\n            name=\"decimal\"\n            value={decimalText}\n            disabled\n          />\n        </Field>\n      </StyledForm>\n    </>\n  )\n}\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(<App />, rootElement)\n"],"sourceRoot":""}